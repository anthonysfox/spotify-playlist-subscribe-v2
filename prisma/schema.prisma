// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum SubscriptionFrequency {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum SyncMode {
  APPEND 
  REPLACE
}

enum AuditAction {
  CREATED
  UPDATED
  DELETED
  SUBSCRIBED
  UNSUBSCRIBED
}

model User {
  id               String            @id @default(uuid())
  clerkUserId      String            @unique
  spotifyRefreshToken String?        @map("spotify_refresh_token")
  spotifyAccessToken  String?        @map("spotify_access_token")
  spotifyTokenExpiresAt DateTime?    @map("spotify_token_expires_at")
  email            String
  name             String?
  imageUrl         String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?        // Soft delete field
  deletedBy        String?          // Optional user ID who deleted this user
  managedPlaylists ManagedPlaylist[]

  // Email can be unique only for non-deleted users
  @@unique([email, deletedAt])
  @@map("users")
}

// Represents a destination playlist on Spotify managed by your application for a user
model ManagedPlaylist {
  // Unique internal identifier for this managed playlist record.
  id String @id @default(cuid())

  // The Clerk user who owns/created this managed playlist on Spotify.
  userId String
  user   User   @relation(fields: [userId], references: [clerkUserId], onDelete: Cascade)

  // The unique ID of this destination playlist on Spotify.
  spotifyPlaylistId String @db.VarChar(255)

  // The name of the managed playlist (could be synced from Spotify or user-defined).
  name String @db.VarChar(255)

  imageUrl String? @db.VarChar(512)

  trackCount Int @default(0)

  syncInterval SubscriptionFrequency

  // How many of the most recent songs to pull FROM EACH subscribed source during a sync run for this playlist.
  syncQuantityPerSource Int @default(5)

  // Advanced settings 
  syncMode SyncMode @default(APPEND)
  explicitContentFilter Boolean @default(false)
  trackAgeLimit Int @default(0)

  customDays String?
  customTime String?

  // Date this managed playlist record was created in your DB.
  createdAt DateTime @default(now())

  // Date this managed playlist record was last updated (including sync settings changes)
  updatedAt DateTime @updatedAt

  deletedAt DateTime? // Soft delete field

  deletedBy String? // Optional user ID who deleted this managed playlist

  // The last time a full sync process completed successfully for this managed playlist.
  lastSyncCompletedAt DateTime?

  lastMetadataRefreshAt DateTime @default(now()) // Last time we refreshed metadata (name, image, etc.)

  // The calculated time for the next scheduled sync for this playlist.
  nextSyncTime DateTime?

  // Links to the source playlists this managed playlist subscribes from
  subscriptions ManagedPlaylistSourceSubscription[]

  @@unique([spotifyPlaylistId, deletedAt])
  @@index([userId])
  @@index([spotifyPlaylistId])
  @@index([nextSyncTime]) // Index for efficient sync scheduling
  @@index([lastSyncCompletedAt]) // Index for quick access to last sync info
  @@index([deletedAt]) // Index for soft delete filtering
  @@index([deletedBy]) // Index for tracking who deleted it
  @@map("managed_playlists") // Maps the model name to the table name
}

// Represents an external Spotify playlist that can be a source, with minimal metadata
model SourcePlaylist {
  // Unique internal identifier for this source playlist record.
  id String @id @default(cuid())

  // The unique ID of the external Spotify playlist (the source).
  spotifyPlaylistId String @db.VarChar(255)

  // The name of the source playlist (fetched once and stored for display).
  name String @db.VarChar(255)

  // URL of the playlist cover image (fetched once).
  imageUrl String? @db.VarChar(512)

  // Make sure the source playlist is active and available
  isActive Boolean @default(true)

  trackCount Int @default(0) // Number of tracks in this source playlist

  lastCheckedActiveAt DateTime? // Last time we checked if this source playlist is still valid

  lastMetadataRefreshAt DateTime @default(now()) // Last time we refreshed metadata (name, image, etc.)

  // Date this source playlist record was created.
  createdAt DateTime @default(now())

  // Date this source playlist record was last updated (e.g., metadata refresh).
  updatedAt DateTime @updatedAt

  deletedAt DateTime? // Soft delete field

  deletedBy String? // Optional user ID who deleted this source playlist

  // Links from managed playlists that subscribe to this source
  managedSubscriptions ManagedPlaylistSourceSubscription[]

  @@unique([spotifyPlaylistId, deletedAt])
  @@index([spotifyPlaylistId]) // Index for quick lookups by Spotify ID
  @@index([deletedAt]) // Index for soft delete filtering
  @@index([deletedBy]) // Index for tracking who deleted it
  @@map("source_playlists") // Maps the model name to the table name
}

// Linking table: connects a managed playlist to a source playlist it subscribes from
model ManagedPlaylistSourceSubscription {
  // Unique internal identifier for this link.
  id String @id @default(cuid())

  // The managed destination playlist.
  managedPlaylistId String
  managedPlaylist   ManagedPlaylist @relation(fields: [managedPlaylistId], references: [id], onDelete: Cascade)

  // The source playlist being subscribed from.
  sourcePlaylistId String
  sourcePlaylist   SourcePlaylist @relation(fields: [sourcePlaylistId], references: [id], onDelete: Cascade)

  // Date this link was created.
  createdAt DateTime @default(now())

  // The last time this specific managed playlist pulled songs from this specific source playlist.
  // Crucial for getting delta updates (songs added to the source SINCE this time).
  lastSyncedFromSourceAt DateTime?

  // Unique constraint to prevent duplicate links
  @@unique([managedPlaylistId, sourcePlaylistId])
  @@index([managedPlaylistId]) // Index for efficient lookups by managed playlist
  @@index([sourcePlaylistId]) // Index for efficient lookups by source playlist
  @@index([lastSyncedFromSourceAt]) // Index for quick access to last sync time
  @@map("managed_playlist_source_subscriptions") // Maps the model name to the table name
}

// Audit log for tracking all changes to subscriptions and playlists
model AuditLog {
  id String @id @default(cuid())
  
  // What action was performed
  action AuditAction
  
  // Which table/entity was affected
  entityType String // "ManagedPlaylist", "SourcePlaylist", "Subscription", etc.
  entityId String   // The ID of the affected record
  
  // Who performed the action
  userId String? // Clerk user ID who made the change
  
  // When it happened
  timestamp DateTime @default(now())
  
  // Details about the change
  oldValues Json? // Previous state (for updates/deletes)
  newValues Json? // New state (for creates/updates)
  
  // Additional context
  metadata Json? // Extra info like IP address, user agent, etc.
  
  @@index([entityType, entityId]) // Query by entity
  @@index([userId]) // Query by user
  @@index([timestamp]) // Query by time range
  @@index([action]) // Query by action type
  @@map("audit_logs")
}
